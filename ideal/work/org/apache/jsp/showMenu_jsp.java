/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.20
 * Generated at: 2021-04-01 03:41:49 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.ArrayList;
import java.util.HashMap;
import model.*;
import java.text.NumberFormat;
import static general.NullErase.*;
import model.User;
import ctrl.SvlUlrl;
import ctrl.*;

public final class showMenu_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

String twitter = "#";
	String twitterImg = "";
	String insta = "#";
	String instaImg = "";
String sns = "<ul class='snsbtniti'><li><a href='"
			+ twitter
			+ "' class='flowbtn7 fl_tw7'><i><img src='/ideal/img/white.svg' alt='twitter'  style='width:100%;' /></i></a></li><li><a href='"
			+ insta + "' class='flowbtn7 insta_btn7'><i></i></a></li></ul>";
String[] typeName = { "前菜", "スープ", "パスタ", "肉料理", "魚料理", "デザート" };
//2次元配列 タイプ名("前菜", "スープ", "パスタ", "肉料理", "魚料理", "デザート")6種ごとに写真を用意
	//タイプID(200, 210, 220, 300, 310, 400)+連番で画像を保存
	String[][] menuImgNames = {
			{ "200_1.jpg", "200_2.jpg", "200_3.jpg", "200_4.jpg", "200_5.jpg" },
			{ "210_1.jpg", "210_2.jpg", "210_3.jpg", "210_4.jpg", "210_5.jpg" },
			{ "220_1.jpg", "220_2.jpg", "220_3.jpg", "220_4.jpg", "220_5.jpg" },
			{ "300_1.jpg", "300_2.jpg", "300_3.jpg", "300_4.jpg", "300_5.jpg" },
			{ "310_1.jpg", "310_2.jpg", "310_3.jpg", "310_4.jpg", "310_5.jpg" },
			{ "400_1.jpg", "400_2.jpg", "400_3.jpg", "400_4.jpg", "400_5.jpg" } };
  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/header.jsp", Long.valueOf(1617235599010L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("ctrl");
    _jspx_imports_packages.add("model");
    _jspx_imports_packages.add("static general.NullErase");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("model.User");
    _jspx_imports_classes.add("java.util.HashMap");
    _jspx_imports_classes.add("java.text.NumberFormat");
    _jspx_imports_classes.add("java.util.ArrayList");
    _jspx_imports_classes.add("ctrl.SvlUlrl");
  }

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\r\n");
      out.write("<html xmlns=\"http://www.w3.org/1999/xhtml\">\r\n");
      out.write("<head>\r\n");
      out.write("<link rel=\"stylesheet\" href=\"../css/showMenu.css\" />\r\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\"\r\n");
      out.write("\thref=\"https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.9.0/slick.css\" />\r\n");
      out.write("<link rel=\"stylesheet\" href=\"/ideal/css/bgBlur.css\" />\r\n");
      out.write("<link rel=\"stylesheet\" href=\"/ideal/css/form.css\" />\r\n");
      out.write("<link rel=\"stylesheet\" href=\"/ideal/css/header.css\" />\r\n");
      out.write("<link rel=\"stylesheet\" href=\"/ideal/css/bg.css\" />\r\n");
      out.write("<link rel=\"stylesheet\" href=\"/ideal/css/footer.css\" />\r\n");
      out.write("<link rel=\"stylesheet\" href=\"/ideal/css/title.css\" />\r\n");
      out.write("\r\n");
      out.write("<link rel=\"stylesheet\"\r\n");
      out.write("\thref=\"https://cdnjs.cloudflare.com/ajax/libs/Swiper/4.0.7/css/swiper.min.css\" />\r\n");
      out.write("\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\r\n");
      out.write("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n");
      out.write("<!-- jQueryの記述 -->\r\n");
      out.write("<script>\r\n");
      out.write("\t$(function() {\r\n");
      out.write("\t\tvar pagetop = $('#page_top');\r\n");
      out.write("\t\t// ボタン非表示\r\n");
      out.write("\t\tpagetop.hide();\r\n");
      out.write("\t\t// 500px スクロールしたらボタン表示\r\n");
      out.write("\t\t$(window).scroll(function() {\r\n");
      out.write("\t\t\tconsole.log($(this).scrollTop());\r\n");
      out.write("\t\t\tif ($(this).scrollTop() > 500) {\r\n");
      out.write("\t\t\t\tpagetop.fadeIn();\r\n");
      out.write("\t\t\t} else {\r\n");
      out.write("\t\t\t\tpagetop.fadeOut();\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\tpagetop.click(function() {\r\n");
      out.write("\t\t\t$('body, html').animate({\r\n");
      out.write("\t\t\t\tscrollTop : 0\r\n");
      out.write("\t\t\t}, 500);\r\n");
      out.write("\t\t\treturn false;\r\n");
      out.write("\t\t});\r\n");
      out.write("\t});\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("<!-- slider画像のスタイル設定 -->\r\n");
      out.write("<style>\r\n");
      out.write(".swiper-container {\r\n");
      out.write("\twidth: 300px;\r\n");
      out.write("\theight: 250px;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<title>メニュー紹介</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("\t");

		ArrayList<Course> courseList = (ArrayList<Course>) request
				.getAttribute("courseList");
		ArrayList<ArrayList<Menu>> menuList = (ArrayList<ArrayList<Menu>>) request
				.getAttribute("menuList");
		HashMap<Integer,String> typeName =(HashMap<Integer, String>)request.getAttribute("typeName");
		NumberFormat nf = NumberFormat.getCurrencyInstance();
	
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t<div style=\"min-height: 100vh; position: relative;\">\r\n");
      out.write("\t\t");
      out.write("<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\r\n");
      out.write("\r\n");
      out.write("<noscript>\r\n");
      out.write("\t<META http-equiv=\"Refresh\" content=\"0;noScriptError.jsp\" />\r\n");
      out.write("</noscript>\r\n");
      out.write("<!--  メニューの要素をここで指定(今回は5つを想定している) -->\r\n");

	User us = (User) session.getAttribute(LoginVar.userInfo);

      out.write('\r');
      out.write('\n');

	String[] menuName = { "ホーム", "メニュー", "ご予約", "アクセス", "ログイン" };

      out.write("\r\n");
      out.write("\r\n");

	String[] menuLink = { "/ideal/home.jsp", SvlUlrl.ShowMenuSvl,
			SvlUlrl.ReserveInsertSvl, "/ideal/access.jsp",
			"/ideal/userLogin.jsp" };

      out.write('\r');
      out.write('\n');

	if (us != null) {
		menuName[4] = "お客様ページ";
		menuLink[4] = "/ideal/userIndex.jsp";
	}

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!-- SNSアカウントと画像イメージの指定 -->\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!-- クラス名などが個別なのでループ処理めんどくなったもの -->\r\n");
      out.write("\r\n");
      out.write("<div id=\"header-left\">\r\n");
      out.write("\r\n");
      out.write("\t<!-- ロゴをクリックすることでホームへ移動 -->\r\n");
      out.write("\t<img id=\"header-logo\" src=\"/ideal/img/logo.svg\" alt=\"Homeへ戻る\" />\r\n");
      out.write("\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<div id=\"header\">\r\n");
      out.write("\r\n");
      out.write("\t<!-- PS向けのメニュー -->\r\n");
      out.write("\t<div id=\"header-right\">\r\n");
      out.write("\t\t");

			for (int i = 0; i < menuName.length; i++) {
		
      out.write("\r\n");
      out.write("\t\t<a class=\"header-button\" href=\"");
      out.print(menuLink[i]);
      out.write('"');
      out.write('>');
      out.print(menuName[i]);
      out.write("</a>\r\n");
      out.write("\t\t");

			}
		
      out.write("\r\n");
      out.write("\t</div>\r\n");
      out.write("\r\n");
      out.write("\t<!-- PC向けのSNSメニュー -->\r\n");
      out.write("\t<div id=\"pc-sns-btn\">\r\n");
      out.write("\t\t");
      out.print(sns);
      out.write("\r\n");
      out.write("\t</div>\r\n");
      out.write("\t<!-- ハンバーガーメニュー -->\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<div class=\"burgerKing bgBlur\">\r\n");
      out.write("\r\n");
      out.write("\t<!-- ロゴをクリックすることでホームへ移動 -->\r\n");
      out.write("\t<img id=\"header-logo\" src=\"/ideal/img/logo.svg\" alt=\"Homeへ戻る\" />\r\n");
      out.write("\r\n");
      out.write("</div>\r\n");
      out.write("<input type=\"checkbox\" id=\"menu-btn-check\"> <label\r\n");
      out.write("\tfor=\"menu-btn-check\" class=\"menu-btn\"><span class=\"menu-btn\"></span></label>\r\n");
      out.write("\t<div class=\"menu-content\">\r\n");
      out.write("\t\t<!-- スマホ向けのメニュー -->\r\n");
      out.write("\t\t<ul class=\"menu-content-ul\">\r\n");
      out.write("\t\t\t");

				for (int i = 0; i < menuName.length; i++) {
			
      out.write("\r\n");
      out.write("\t\t\t<li class=\"menu-content-ul-li\"><a href=\"");
      out.print(menuLink[i]);
      out.write('"');
      out.write('>');
      out.print(menuName[i]);
      out.write("</a>\r\n");
      out.write("\t\t\t</li>\r\n");
      out.write("\t\t\t");

				}
			
      out.write("\r\n");
      out.write("\t\t</ul>\r\n");
      out.write("\r\n");
      out.write("\t\t<!-- スマホ向けのSNSメニュー -->\r\n");
      out.write("\t\t<div id=\"phone-sns-btn\">\r\n");
      out.write("\t\t\t");
      out.print(sns);
      out.write("\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\r\n");
      out.write("\t</div> </input>");
      out.write("\r\n");
      out.write("<div class=\"titleSticky\">\r\n");
      out.write("\t\t\t\t<div class=\"titleInnerDiv\">\r\n");
      out.write("\t\t\t\t\t<h1 class=\"redBack\">コース料理</h1>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t\t<center>\r\n");
      out.write("\t\t<div class=\"course-container\">\r\n");
      out.write("\r\n");
      out.write("\t\t\t");
      out.write("\r\n");
      out.write("\t\t\t");

//■スライダーの設定 配列にsliderに必要な写真をセット
String[][] sliderImages={
		{"foie gras.jpg","onionsoup2.jpeg","sirloin Steak.jpg","gateau Chocolat.jpg"},
		{"shrimp2.jpg","clam chowder.jpg","duck meat.jpg","pear.jpg"},
		{"shrimp2.jpg","clam chowder.jpg","pescatore2.jpg","lobster2.jpg","matcha3.jpg"}
};


      out.write("\r\n");
      out.write("\t\t\t");

			int courseImgCount = 0;
			for (Course co : courseList) {
		
      out.write("\r\n");
      out.write("\t\t\t<center>\r\n");
      out.write("\t\t\t<div class=\"course-panel bgBlue flex-container\">\r\n");
      out.write("\t\t\t\t<div>\r\n");
      out.write("\t\t\t\t<h2 class=\"green-font\">");
      out.print(co.getCourseName());
      out.write("</h2>\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t<div class=\"course-detail\">\r\n");
      out.write("\t\t\t\t\t");

					for (int i = 0; i < Course.COURSE.length; i++) {
							int typeID;
							String menuName2;//同じ変数名が別ファイルで存在 ２をつける
							MenuBase menuObject = co.getOneCourseMenu(Course.COURSE[i]);
							if (menuObject == null) {
								continue;
							} else {
								typeID = menuObject.getTypeId();
								menuName2 = menuObject.getMenuName();
							}
				
      out.write("\r\n");
      out.write("\t\t\t\t\t<h4>");
      out.print(typeName.get(typeID));
      out.write("</h4>\r\n");
      out.write("\t\t\t\t\t");
      out.print(menuName2);
      out.write("</br>\r\n");
      out.write("\t\t\t\t\t");

					}
				
      out.write("\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t<div class=\"course-img\">\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t<!--  ■スライダーの設定-->\r\n");
      out.write("\t\t\t\t\t<div class=\"swiper-container\">\r\n");
      out.write("\t\t\t\t\t\t<!-- 全スライドをまとめるラッパー -->\r\n");
      out.write("\t\t\t\t\t\t<div class=\"swiper-wrapper\">\r\n");
      out.write("\t\t\t\t\t\t\t");
for(int i=0;i<sliderImages[courseImgCount].length;i++) {
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t<div class=\"swiper-slide\">\r\n");
      out.write("\t\t\t\t\t\t\t\t<img src=\"/ideal/img/");
      out.print(sliderImages[courseImgCount][i]);
      out.write("\" />\r\n");
      out.write("\t\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t\t");
} 
      out.write("\r\n");
      out.write("\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t<!-- ページネーションを表示する場合 -->\r\n");
      out.write("\t\t\t\t\t\t<div class=\"swiper-pagination\"></div>\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t<!-- 前後スライドへのナビゲーションボタン(矢印)を表示する場合 -->\r\n");
      out.write("\t\t\t\t\t\t<div class=\"swiper-button-prev\"></div>\r\n");
      out.write("\t\t\t\t\t\t<div class=\"swiper-button-next\"></div>\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t<!-- スクロールバーを表示する場合 -->\r\n");
      out.write("\t\t\t\t\t\t<div class=\"swiper-scrollbar\"></div>\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t</div>\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t<span>");
      out.print(co.getDetail());
      out.write("</span></br> <span class=\"price\">");
      out.print(nf.format(co.getPrice()));
      out.write("</span>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t\t</center>\r\n");
      out.write("\t\t\t");

			courseImgCount++;
			}
		
      out.write("\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t</center>\r\n");
      out.write("\r\n");
      out.write("\t\t<div class=\"titleSticky\">\r\n");
      out.write("\t\t\t\t<div class=\"titleInnerDiv\">\r\n");
      out.write("\t\t\t\t\t<h1 class=\"greenBack\">一品料理</h1>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("<center>\r\n");
      out.write("\t\t<div class=\"menu-container\">\r\n");
      out.write("\r\n");
      out.write("\t\t\t");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t\t\t");

			int menuImgCount1 = 0;
			for (ArrayList<Menu> al : menuList) {
				if (al.isEmpty())
					continue;
		
      out.write("\r\n");
      out.write("\t\t\t<h3>");
      out.print(al.get(0).getTypeName());
      out.write("</h3>\r\n");
      out.write("\t\t\t<div class=\"flex-container\">\r\n");
      out.write("\t\t\t\t");

			int menuImgCount2 = 0;
				for (Menu m : al) {
		
      out.write("\r\n");
      out.write("\t\t\t\t<div class=\"menu-panel bgBlue flex-container\">\r\n");
      out.write("\t\t\t\t\t<div class=\"menu-detail\">\r\n");
      out.write("\t\t\t\t\t\t<h4>");
      out.print(m.getMenuName());
      out.write("</h4>\r\n");
      out.write("\t\t\t\t\t\t<br />\r\n");
      out.write("\t\t\t\t\t\t");
      out.print(fmtNull(m.getDetail()));
      out.write("<br />\r\n");
      out.write("\t\t\t\t\t\t");
      out.print(nf.format(m.getPrice()));
      out.write("<br />\r\n");
      out.write("\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t<div class=\"menu-img\">\r\n");
      out.write("\t\t\t\t\t\t<img class=\"menu-img-size\"\r\n");
      out.write("\t\t\t\t\t\t\tsrc=\"/ideal/img/");
      out.print(menuImgNames[menuImgCount1][menuImgCount2]);
      out.write("\" />\r\n");
      out.write("\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t");

			menuImgCount2++;
				}

		
      out.write("\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t\t");

			menuImgCount1++;
			}
		
      out.write("\r\n");
      out.write("\t\t</div>\r\n");
      out.write("</center>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t</div>\r\n");
      out.write("\t<!-- TOPへ戻るボタン -->\r\n");
      out.write("\t<div id=\"page_top\">\r\n");
      out.write("\t\t<a href=\"#\">TOP</a>\r\n");
      out.write("\t\t");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/footer.jsp", out, false);
      out.write("\r\n");
      out.write("\t</div>\r\n");
      out.write("\r\n");
      out.write("\t<!--  -->\r\n");
      out.write("\t<script>\r\n");
      out.write("\t\tvar mySwiper = new Swiper('.swiper-container', {\r\n");
      out.write("\t\t\t// オプションパラメータ(一部のみ抜粋)\r\n");
      out.write("\t\t\tloop : true, // 最後のスライドまで到達した場合、最初に戻らずに続けてスライド可能にするか。\r\n");
      out.write("\t\t\tspeed : 600, // スライドが切り替わるトランジション時間(ミリ秒)。\r\n");
      out.write("\t\t\tslidesPerView : 1, // 何枚のスライドを表示するか\r\n");
      out.write("\t\t\tspaceBetween : 10, // スライド間の余白サイズ(ピクセル)\r\n");
      out.write("\t\t\tdirection : 'horizontal', // スライド方向。 'horizontal'(水平) か 'vertical'(垂直)。effectオプションが 'slide' 以外は無効。\r\n");
      out.write("\t\t\teffect : 'slide', // \"slide\", \"fade\"(フェード), \"cube\"(キューブ回転), \"coverflow\"(カバーフロー) または \"flip\"(平面回転)\r\n");
      out.write("\r\n");
      out.write("\t\t\t// スライダーの自動再生\r\n");
      out.write("\t\t\t// autoplay: true 　のみなら既定値での自動再生\r\n");
      out.write("\t\t\tautoplay : {\r\n");
      out.write("\t\t\t\tdelay : 3000, // スライドが切り替わるまでの表示時間(ミリ秒)\r\n");
      out.write("\t\t\t\tstopOnLast : false, // 最後のスライドまで表示されたら自動再生を中止するか\r\n");
      out.write("\t\t\t\tdisableOnInteraction : true\r\n");
      out.write("\t\t\t// ユーザーのスワイプ操作を検出したら自動再生を中止するか\r\n");
      out.write("\t\t\t},\r\n");
      out.write("\r\n");
      out.write("\t\t\t// ページネーションを表示する場合\r\n");
      out.write("\t\t\tpagination : {\r\n");
      out.write("\t\t\t\tel : '.swiper-pagination',\r\n");
      out.write("\t\t\t},\r\n");
      out.write("\r\n");
      out.write("\t\t\t// 前後スライドへのナビゲーションを表示する場合\r\n");
      out.write("\t\t\tnavigation : {\r\n");
      out.write("\t\t\t\tnextEl : '.swiper-button-next', // 次のスライドボタンのセレクタ\r\n");
      out.write("\t\t\t\tprevEl : '.swiper-button-prev', // 前のスライドボタンのセレクタ\r\n");
      out.write("\t\t\t},\r\n");
      out.write("\r\n");
      out.write("\t\t\t// スクロールバーを表示する場合\r\n");
      out.write("\t\t\tscrollbar : {\r\n");
      out.write("\t\t\t\tel : '.swiper-scrollbar', // スクロールバーを表示するセレクタ\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t});\r\n");
      out.write("\t</script>\r\n");
      out.write("\t<script\r\n");
      out.write("\t\tsrc=\"https://cdnjs.cloudflare.com/ajax/libs/Swiper/4.0.7/js/swiper.min.js\"></script>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
